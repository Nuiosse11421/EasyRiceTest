{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 47, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Work/Code/Project/RiceInspectionApp/frontend/src/pages/edit.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { useRouter } from 'next/router';\r\nimport axios from 'axios';\r\n\r\nconst Edit = () => {\r\n    const router = useRouter();\r\n    const { inspectionID } = router.query;\r\n    const [formData, setFormData] = useState({\r\n        note: '',\r\n        price: '',\r\n        samplingDate: '',\r\n        samplingPoint: [],\r\n    })\r\n    useEffect(() => {\r\n        if (inspectionID) {\r\n            axios.get(`http://localhost:8000/history/${inspectionID}`)\r\n                .then(response => {\r\n                    const { note, price, samplingDate, samplingPoint } = response.data;\r\n                    setFormData({\r\n                        note: note || '',\r\n                        price: price || 0,\r\n                        samplingDate: samplingDate ? new Date(samplingDate).toISOString().slice(0, 16) : '',\r\n                        samplingPoint: samplingPoint || [],\r\n                    })\r\n                }).catch(err =>{\r\n                    console.error('Error fetching inspection Date: ',err)\r\n                })\r\n        }\r\n    },[inspectionID])\r\n    const handleInputChange = (event)=>{\r\n        const{name, value, type, checked} = event.target;\r\n        if(type === 'checkbox'){\r\n            const updatedPoints = checked ? [...formData.samplingPoint, value] : formData.samplingPoint.filter(point => point !== value);\r\n            setFormData({...formData, samplingPoint:updatedPoints});\r\n        } else{\r\n            setFormData({...formData,[name]:value});\r\n        }\r\n    };\r\n    const handleSubmit = (event) =>{\r\n        event.preventDefault();\r\n        axios.put(`http://localhost:8000/history/${inspectionID}`,formData)\r\n            .then(()=>{\r\n                router.push(`/result/${inspectionID}`)\r\n            }).catch(err=>{\r\n                console.error('Error updateing inspection: ',err)\r\n            })\r\n    }\r\n    return(\r\n        <div>\r\n            <h2>Edit Inspection ID: {inspectionID}</h2>\r\n        </div>\r\n    )\r\n}"],"names":[],"mappings":";;AAAA;AACA;AACA;;;;;AAEA,MAAM,OAAO;IACT,MAAM,SAAS,CAAA,GAAA,uHAAA,CAAA,YAAS,AAAD;IACvB,MAAM,EAAE,YAAY,EAAE,GAAG,OAAO,KAAK;IACrC,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,8FAAA,CAAA,WAAQ,AAAD,EAAE;QACrC,MAAM;QACN,OAAO;QACP,cAAc;QACd,eAAe,EAAE;IACrB;IACA,CAAA,GAAA,8FAAA,CAAA,YAAS,AAAD,EAAE;QACN,IAAI,cAAc;YACd,qGAAA,CAAA,UAAK,CAAC,GAAG,CAAC,CAAC,8BAA8B,EAAE,cAAc,EACpD,IAAI,CAAC,CAAA;gBACF,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,YAAY,EAAE,aAAa,EAAE,GAAG,SAAS,IAAI;gBAClE,YAAY;oBACR,MAAM,QAAQ;oBACd,OAAO,SAAS;oBAChB,cAAc,eAAe,IAAI,KAAK,cAAc,WAAW,GAAG,KAAK,CAAC,GAAG,MAAM;oBACjF,eAAe,iBAAiB,EAAE;gBACtC;YACJ,GAAG,KAAK,CAAC,CAAA;gBACL,QAAQ,KAAK,CAAC,oCAAmC;YACrD;QACR;IACJ,GAAE;QAAC;KAAa;IAChB,MAAM,oBAAoB,CAAC;QACvB,MAAK,EAAC,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAC,GAAG,MAAM,MAAM;QAChD,IAAG,SAAS,YAAW;YACnB,MAAM,gBAAgB,UAAU;mBAAI,SAAS,aAAa;gBAAE;aAAM,GAAG,SAAS,aAAa,CAAC,MAAM,CAAC,CAAA,QAAS,UAAU;YACtH,YAAY;gBAAC,GAAG,QAAQ;gBAAE,eAAc;YAAa;QACzD,OAAM;YACF,YAAY;gBAAC,GAAG,QAAQ;gBAAC,CAAC,KAAK,EAAC;YAAK;QACzC;IACJ;IACA,MAAM,eAAe,CAAC;QAClB,MAAM,cAAc;QACpB,qGAAA,CAAA,UAAK,CAAC,GAAG,CAAC,CAAC,8BAA8B,EAAE,cAAc,EAAC,UACrD,IAAI,CAAC;YACF,OAAO,IAAI,CAAC,CAAC,QAAQ,EAAE,cAAc;QACzC,GAAG,KAAK,CAAC,CAAA;YACL,QAAQ,KAAK,CAAC,gCAA+B;QACjD;IACR;IACA,qBACI,uIAAC;kBACG,cAAA,uIAAC;;gBAAG;gBAAqB;;;;;;;;;;;;AAGrC"}},
    {"offset": {"line": 125, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}